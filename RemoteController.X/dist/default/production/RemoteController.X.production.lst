

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Feb 23 01:24:04 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     	;# 
    18  0001                     	;# 
    19  0002                     	;# 
    20  0003                     	;# 
    21  0004                     	;# 
    22  0005                     	;# 
    23  0006                     	;# 
    24  0007                     	;# 
    25  0009                     	;# 
    26  000A                     	;# 
    27  000B                     	;# 
    28  000C                     	;# 
    29  000D                     	;# 
    30  000E                     	;# 
    31  000E                     	;# 
    32  000F                     	;# 
    33  0010                     	;# 
    34  0011                     	;# 
    35  0012                     	;# 
    36  0013                     	;# 
    37  0014                     	;# 
    38  0015                     	;# 
    39  0015                     	;# 
    40  0016                     	;# 
    41  0017                     	;# 
    42  0018                     	;# 
    43  0019                     	;# 
    44  001A                     	;# 
    45  001B                     	;# 
    46  001B                     	;# 
    47  001C                     	;# 
    48  001D                     	;# 
    49  001E                     	;# 
    50  001F                     	;# 
    51  0081                     	;# 
    52  0085                     	;# 
    53  0086                     	;# 
    54  0087                     	;# 
    55  0089                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  008F                     	;# 
    60  0090                     	;# 
    61  0091                     	;# 
    62  0092                     	;# 
    63  0093                     	;# 
    64  0093                     	;# 
    65  0093                     	;# 
    66  0094                     	;# 
    67  0095                     	;# 
    68  0096                     	;# 
    69  0097                     	;# 
    70  0098                     	;# 
    71  0099                     	;# 
    72  009A                     	;# 
    73  009B                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  009F                     	;# 
    78  0105                     	;# 
    79  0107                     	;# 
    80  0108                     	;# 
    81  0109                     	;# 
    82  010C                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  010E                     	;# 
    86  010F                     	;# 
    87  0185                     	;# 
    88  0187                     	;# 
    89  0188                     	;# 
    90  0189                     	;# 
    91  018C                     	;# 
    92  018D                     	;# 
    93  002E                     _RA6	set	46
    94  002F                     _RA7	set	47
    95  0038                     _RC0	set	56
    96  0039                     _RC1	set	57
    97  003A                     _RC2	set	58
    98  003B                     _RC3	set	59
    99  008F                     _OSCCON	set	143
   100  0085                     _TRISA	set	133
   101  0087                     _TRISC	set	135
   102                           
   103                           	psect	strings
   104  0003                     __pstrings:	
   105  0003                     stringtab:	
   106  0003                     __stringtab:	
   107  0003                     stringcode:	
   108                           ;	String table - string pointers are 1 byte each
   109                           
   110  0003                     stringdir:	
   111  0003  3000               	movlw	high stringdir
   112  0004  008A               	movwf	10
   113  0005  0804               	movf	4,w
   114  0006  0A84               	incf	4,f
   115  0007  0782               	addwf	2,f
   116  0008                     __stringbase:	
   117  0008  3400               	retlw	0
   118  0009                     __end_of__stringtab:	
   119  0009                     __stringdata:	
   120  0009                     STR_1:	
   121  0009  3453               	retlw	83	;'S'
   122  000A  3474               	retlw	116	;'t'
   123  000B  346A               	retlw	106	;'j'
   124  000C  3465               	retlw	101	;'e'
   125  000D  3472               	retlw	114	;'r'
   126  000E  346E               	retlw	110	;'n'
   127  000F  3465               	retlw	101	;'e'
   128  0010  3449               	retlw	73	;'I'
   129  0011  3464               	retlw	100	;'d'
   130  0012  3469               	retlw	105	;'i'
   131  0013  346F               	retlw	111	;'o'
   132  0014  3474               	retlw	116	;'t'
   133  0015  3465               	retlw	101	;'e'
   134  0016  346E               	retlw	110	;'n'
   135  0017  3400               	retlw	0
   136  0018                     __end_of__stringdata:	
   137                           
   138                           ; #config settings
   139  0000                     
   140                           	psect	cinit
   141  07FC                     start_initialization:	
   142  07FC                     __initialization:	
   143  07FC                     end_of_initialization:	
   144                           ;End of C runtime variable initialization code
   145                           
   146  07FC                     __end_of__initialization:	
   147  07FC  0183               	clrf	3
   148  07FD  120A  118A  2EDA   	ljmp	_main	;jump to C main() function
   149                           
   150                           	psect	cstackCOMMON
   151  0070                     __pcstackCOMMON:	
   152  0070                     ?_Lcd_Port:	
   153  0070                     ??_Lcd_Port:	
   154                           ; 0 bytes @ 0x0
   155                           
   156  0070                     ?_Lcd_Cmd:	
   157                           ; 0 bytes @ 0x0
   158                           
   159  0070                     ?_Lcd_Init:	
   160                           ; 0 bytes @ 0x0
   161                           
   162  0070                     ?_Lcd_Write_Char:	
   163                           ; 0 bytes @ 0x0
   164                           
   165  0070                     ?_Lcd_Write_String:	
   166                           ; 0 bytes @ 0x0
   167                           
   168  0070                     ?_Lcd_Clear:	
   169                           ; 0 bytes @ 0x0
   170                           
   171  0070                     Lcd_Port@a:	
   172                           ; 2 bytes @ 0x0
   173                           
   174                           
   175                           ; 1 bytes @ 0x0
   176  0070                     	ds	1
   177  0071                     ??_Lcd_Cmd:	
   178  0071                     ??_Lcd_Write_Char:	
   179                           ; 0 bytes @ 0x1
   180                           
   181                           
   182                           ; 0 bytes @ 0x1
   183  0071                     	ds	1
   184  0072                     Lcd_Write_Char@temp:	
   185                           
   186                           ; 1 bytes @ 0x2
   187  0072                     	ds	1
   188  0073                     Lcd_Cmd@a:	
   189  0073                     Lcd_Write_Char@y:	
   190                           ; 1 bytes @ 0x3
   191                           
   192                           
   193                           ; 1 bytes @ 0x3
   194  0073                     	ds	1
   195  0074                     ??_Lcd_Clear:	
   196  0074                     ?_Lcd_Set_Cursor:	
   197                           ; 0 bytes @ 0x4
   198                           
   199  0074                     ??_Lcd_Init:	
   200                           ; 0 bytes @ 0x4
   201                           
   202  0074                     Lcd_Set_Cursor@b:	
   203                           ; 0 bytes @ 0x4
   204                           
   205  0074                     Lcd_Write_Char@a:	
   206                           ; 1 bytes @ 0x4
   207                           
   208                           
   209                           ; 1 bytes @ 0x4
   210  0074                     	ds	1
   211  0075                     ??_Lcd_Set_Cursor:	
   212  0075                     ??_Lcd_Write_String:	
   213                           ; 0 bytes @ 0x5
   214                           
   215  0075                     Lcd_Write_String@i:	
   216                           ; 0 bytes @ 0x5
   217                           
   218                           
   219                           ; 2 bytes @ 0x5
   220  0075                     	ds	2
   221  0077                     Lcd_Set_Cursor@a:	
   222  0077                     Lcd_Write_String@a:	
   223                           ; 1 bytes @ 0x7
   224                           
   225                           
   226                           ; 1 bytes @ 0x7
   227  0077                     	ds	1
   228  0078                     Lcd_Set_Cursor@z:	
   229                           
   230                           ; 1 bytes @ 0x8
   231  0078                     	ds	1
   232  0079                     Lcd_Set_Cursor@y:	
   233                           
   234                           ; 1 bytes @ 0x9
   235  0079                     	ds	1
   236  007A                     Lcd_Set_Cursor@temp:	
   237                           
   238                           ; 1 bytes @ 0xA
   239  007A                     	ds	1
   240  007B                     ??_main:	
   241                           
   242                           ; 0 bytes @ 0xB
   243  007B                     	ds	1
   244                           
   245                           	psect	cstackBANK0
   246  0020                     __pcstackBANK0:	
   247  0020                     ?_main:	
   248  0020                     main@argc:	
   249                           ; 2 bytes @ 0x0
   250                           
   251                           
   252                           ; 2 bytes @ 0x0
   253  0020                     	ds	2
   254  0022                     main@argv:	
   255                           
   256                           ; 2 bytes @ 0x2
   257  0022                     	ds	2
   258                           
   259                           	psect	maintext
   260  06DA                     __pmaintext:	
   261 ;;
   262 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   263 ;;
   264 ;; *************** function _main *****************
   265 ;; Defined at:
   266 ;;		line 52 in file "main.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;  argc            2    0[BANK0 ] int 
   269 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   270 ;; Auto vars:     Size  Location     Type
   271 ;;		None
   272 ;; Return value:  Size  Location     Type
   273 ;;                  2    0[BANK0 ] int 
   274 ;; Registers used:
   275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   276 ;; Tracked objects:
   277 ;;		On entry : 17F/0
   278 ;;		On exit  : 0/0
   279 ;;		Unchanged: 0/0
   280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   281 ;;      Params:         0       4       0       0       0
   282 ;;      Locals:         0       0       0       0       0
   283 ;;      Temps:          1       0       0       0       0
   284 ;;      Totals:         1       4       0       0       0
   285 ;;Total ram usage:        5 bytes
   286 ;; Hardware stack levels required when called:    3
   287 ;; This function calls:
   288 ;;		_Lcd_Clear
   289 ;;		_Lcd_Init
   290 ;;		_Lcd_Set_Cursor
   291 ;;		_Lcd_Write_String
   292 ;; This function is called by:
   293 ;;		Startup code after reset
   294 ;; This function uses a non-reentrant model
   295 ;;
   296                           
   297                           
   298                           ;psect for function _main
   299  06DA                     _main:	
   300                           
   301                           ;main.c: 53: OSCCON = 0b01110111;
   302                           
   303                           ;incstack = 0
   304                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   305  06DA  3077               	movlw	119
   306  06DB  1683               	bsf	3,5	;RP0=1, select bank1
   307  06DC  1303               	bcf	3,6	;RP1=0, select bank1
   308  06DD  008F               	movwf	15	;volatile
   309                           
   310                           ;main.c: 54: TRISC = 0b00000000;
   311  06DE  0187               	clrf	7	;volatile
   312                           
   313                           ;main.c: 55: TRISA = 0b00000000;
   314  06DF  0185               	clrf	5	;volatile
   315                           
   316                           ;main.c: 57: Lcd_Init();
   317  06E0  120A  118A  27A1  120A  118A  	fcall	_Lcd_Init
   318                           
   319                           ;main.c: 58: Lcd_Clear();
   320  06E5  120A  118A  269B  120A  118A  	fcall	_Lcd_Clear
   321                           
   322                           ;main.c: 59: Lcd_Set_Cursor(1,4);
   323  06EA  3004               	movlw	4
   324  06EB  00FB               	movwf	??_main
   325  06EC  087B               	movf	??_main,w
   326  06ED  00F4               	movwf	Lcd_Set_Cursor@b
   327  06EE  3001               	movlw	1
   328  06EF  120A  118A  2756  120A  118A  	fcall	_Lcd_Set_Cursor
   329                           
   330                           ;main.c: 60: Lcd_Write_String("StjerneIdioten");
   331  06F4  3001               	movlw	(STR_1-__stringbase)& (0+255)
   332  06F5  120A  118A  26FB  120A  118A  	fcall	_Lcd_Write_String
   333  06FA                     l64:	
   334                           ;main.c: 62: while(1) {
   335                           
   336  06FA  2EFA               	goto	l64
   337  06FB                     __end_of_main:	
   338                           ;main.c: 64: }
   339                           ;main.c: 65: return (0);
   340                           ;	Return value of _main is never used
   341                           
   342                           
   343                           	psect	text1
   344  06FB                     __ptext1:	
   345 ;; *************** function _Lcd_Write_String *****************
   346 ;; Defined at:
   347 ;;		line 97 in file "lcd.h"
   348 ;; Parameters:    Size  Location     Type
   349 ;;  a               1    wreg     PTR unsigned char 
   350 ;;		 -> STR_1(15), 
   351 ;; Auto vars:     Size  Location     Type
   352 ;;  a               1    7[COMMON] PTR unsigned char 
   353 ;;		 -> STR_1(15), 
   354 ;;  i               2    5[COMMON] int 
   355 ;; Return value:  Size  Location     Type
   356 ;;		None               void
   357 ;; Registers used:
   358 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   359 ;; Tracked objects:
   360 ;;		On entry : 0/0
   361 ;;		On exit  : 0/0
   362 ;;		Unchanged: 0/0
   363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   364 ;;      Params:         0       0       0       0       0
   365 ;;      Locals:         3       0       0       0       0
   366 ;;      Temps:          0       0       0       0       0
   367 ;;      Totals:         3       0       0       0       0
   368 ;;Total ram usage:        3 bytes
   369 ;; Hardware stack levels used:    1
   370 ;; Hardware stack levels required when called:    2
   371 ;; This function calls:
   372 ;;		_Lcd_Write_Char
   373 ;; This function is called by:
   374 ;;		_main
   375 ;; This function uses a non-reentrant model
   376 ;;
   377                           
   378                           
   379                           ;psect for function _Lcd_Write_String
   380  06FB                     _Lcd_Write_String:	
   381                           
   382                           ;incstack = 0
   383                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   384                           ;Lcd_Write_String@a stored from wreg
   385  06FB  00F7               	movwf	Lcd_Write_String@a
   386                           
   387                           ;lcd.h: 99: int i;
   388                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   389  06FC  01F5               	clrf	Lcd_Write_String@i
   390  06FD  01F6               	clrf	Lcd_Write_String@i+1
   391  06FE                     l602:	
   392  06FE  0875               	movf	Lcd_Write_String@i,w
   393  06FF  0777               	addwf	Lcd_Write_String@a,w
   394  0700  0084               	movwf	4
   395  0701  120A  118A  2003  120A  118A  	fcall	stringdir
   396  0706  3800               	iorlw	0
   397  0707  1903               	btfsc	3,2
   398  0708  0008               	return
   399                           
   400                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   401  0709  0875               	movf	Lcd_Write_String@i,w
   402  070A  0777               	addwf	Lcd_Write_String@a,w
   403  070B  0084               	movwf	4
   404  070C  120A  118A  2003  120A  118A  	fcall	stringdir
   405  0711  120A  118A  271D  120A  118A  	fcall	_Lcd_Write_Char
   406  0716  3001               	movlw	1
   407  0717  07F5               	addwf	Lcd_Write_String@i,f
   408  0718  1803               	skipnc
   409  0719  0AF6               	incf	Lcd_Write_String@i+1,f
   410  071A  3000               	movlw	0
   411  071B  07F6               	addwf	Lcd_Write_String@i+1,f
   412  071C  2EFE               	goto	l602
   413  071D                     __end_of_Lcd_Write_String:	
   414                           
   415                           	psect	text2
   416  071D                     __ptext2:	
   417 ;; *************** function _Lcd_Write_Char *****************
   418 ;; Defined at:
   419 ;;		line 81 in file "lcd.h"
   420 ;; Parameters:    Size  Location     Type
   421 ;;  a               1    wreg     unsigned char 
   422 ;; Auto vars:     Size  Location     Type
   423 ;;  a               1    4[COMMON] unsigned char 
   424 ;;  y               1    3[COMMON] unsigned char 
   425 ;;  temp            1    2[COMMON] unsigned char 
   426 ;; Return value:  Size  Location     Type
   427 ;;		None               void
   428 ;; Registers used:
   429 ;;		wreg, status,2, status,0, pclath, cstack
   430 ;; Tracked objects:
   431 ;;		On entry : 0/0
   432 ;;		On exit  : 0/0
   433 ;;		Unchanged: 0/0
   434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   435 ;;      Params:         0       0       0       0       0
   436 ;;      Locals:         3       0       0       0       0
   437 ;;      Temps:          1       0       0       0       0
   438 ;;      Totals:         4       0       0       0       0
   439 ;;Total ram usage:        4 bytes
   440 ;; Hardware stack levels used:    1
   441 ;; Hardware stack levels required when called:    1
   442 ;; This function calls:
   443 ;;		_Lcd_Port
   444 ;; This function is called by:
   445 ;;		_Lcd_Write_String
   446 ;; This function uses a non-reentrant model
   447 ;;
   448                           
   449                           
   450                           ;psect for function _Lcd_Write_Char
   451  071D                     _Lcd_Write_Char:	
   452                           
   453                           ;incstack = 0
   454                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   455                           ;Lcd_Write_Char@a stored from wreg
   456  071D  00F4               	movwf	Lcd_Write_Char@a
   457                           
   458                           ;lcd.h: 83: char temp,y;
   459                           ;lcd.h: 84: temp = a&0x0F;
   460  071E  0874               	movf	Lcd_Write_Char@a,w
   461  071F  390F               	andlw	15
   462  0720  00F1               	movwf	??_Lcd_Write_Char
   463  0721  0871               	movf	??_Lcd_Write_Char,w
   464  0722  00F2               	movwf	Lcd_Write_Char@temp
   465                           
   466                           ;lcd.h: 85: y = a&0xF0;
   467  0723  0874               	movf	Lcd_Write_Char@a,w
   468  0724  39F0               	andlw	240
   469  0725  00F1               	movwf	??_Lcd_Write_Char
   470  0726  0871               	movf	??_Lcd_Write_Char,w
   471  0727  00F3               	movwf	Lcd_Write_Char@y
   472                           
   473                           ;lcd.h: 86: RC3 = 1;
   474  0728  1283               	bcf	3,5	;RP0=0, select bank0
   475  0729  1303               	bcf	3,6	;RP1=0, select bank0
   476  072A  1587               	bsf	7,3	;volatile
   477                           
   478                           ;lcd.h: 87: Lcd_Port(y>>4);
   479  072B  0873               	movf	Lcd_Write_Char@y,w
   480  072C  00F1               	movwf	??_Lcd_Write_Char
   481  072D  3004               	movlw	4
   482  072E                     u55:	
   483  072E  1003               	clrc
   484  072F  0CF1               	rrf	??_Lcd_Write_Char,f
   485  0730  3EFF               	addlw	-1
   486  0731  1D03               	skipz
   487  0732  2F2E               	goto	u55
   488  0733  0871               	movf	??_Lcd_Write_Char,w
   489  0734  120A  118A  26A6  120A  118A  	fcall	_Lcd_Port
   490                           
   491                           ;lcd.h: 88: RC2 = 1;
   492  0739  1283               	bcf	3,5	;RP0=0, select bank0
   493  073A  1303               	bcf	3,6	;RP1=0, select bank0
   494  073B  1507               	bsf	7,2	;volatile
   495                           
   496                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
   497  073C  301A               	movlw	26
   498  073D  00F1               	movwf	??_Lcd_Write_Char
   499  073E                     u117:	
   500  073E  0BF1               	decfsz	??_Lcd_Write_Char,f
   501  073F  2F3E               	goto	u117
   502  0740  0000               	nop
   503                           
   504                           ;lcd.h: 90: RC2 = 0;
   505  0741  1283               	bcf	3,5	;RP0=0, select bank0
   506  0742  1303               	bcf	3,6	;RP1=0, select bank0
   507  0743  1107               	bcf	7,2	;volatile
   508                           
   509                           ;lcd.h: 91: Lcd_Port(temp);
   510  0744  0872               	movf	Lcd_Write_Char@temp,w
   511  0745  120A  118A  26A6  120A  118A  	fcall	_Lcd_Port
   512                           
   513                           ;lcd.h: 92: RC2 = 1;
   514  074A  1283               	bcf	3,5	;RP0=0, select bank0
   515  074B  1303               	bcf	3,6	;RP1=0, select bank0
   516  074C  1507               	bsf	7,2	;volatile
   517                           
   518                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
   519  074D  301A               	movlw	26
   520  074E  00F1               	movwf	??_Lcd_Write_Char
   521  074F                     u127:	
   522  074F  0BF1               	decfsz	??_Lcd_Write_Char,f
   523  0750  2F4F               	goto	u127
   524  0751  0000               	nop
   525                           
   526                           ;lcd.h: 94: RC2 = 0;
   527  0752  1283               	bcf	3,5	;RP0=0, select bank0
   528  0753  1303               	bcf	3,6	;RP1=0, select bank0
   529  0754  1107               	bcf	7,2	;volatile
   530  0755  0008               	return
   531  0756                     __end_of_Lcd_Write_Char:	
   532                           
   533                           	psect	text3
   534  0756                     __ptext3:	
   535 ;; *************** function _Lcd_Set_Cursor *****************
   536 ;; Defined at:
   537 ;;		line 41 in file "lcd.h"
   538 ;; Parameters:    Size  Location     Type
   539 ;;  a               1    wreg     unsigned char 
   540 ;;  b               1    4[COMMON] unsigned char 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  a               1    7[COMMON] unsigned char 
   543 ;;  temp            1   10[COMMON] unsigned char 
   544 ;;  y               1    9[COMMON] unsigned char 
   545 ;;  z               1    8[COMMON] unsigned char 
   546 ;; Return value:  Size  Location     Type
   547 ;;		None               void
   548 ;; Registers used:
   549 ;;		wreg, status,2, status,0, pclath, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   555 ;;      Params:         1       0       0       0       0
   556 ;;      Locals:         4       0       0       0       0
   557 ;;      Temps:          2       0       0       0       0
   558 ;;      Totals:         7       0       0       0       0
   559 ;;Total ram usage:        7 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    2
   562 ;; This function calls:
   563 ;;		_Lcd_Cmd
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           
   570                           ;psect for function _Lcd_Set_Cursor
   571  0756                     _Lcd_Set_Cursor:	
   572                           
   573                           ;incstack = 0
   574                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   575                           ;Lcd_Set_Cursor@a stored from wreg
   576  0756  00F7               	movwf	Lcd_Set_Cursor@a
   577                           
   578                           ;lcd.h: 43: char temp,z,y;
   579                           ;lcd.h: 44: if(a == 1)
   580  0757  0877               	movf	Lcd_Set_Cursor@a,w
   581  0758  3A01               	xorlw	1
   582  0759  1D03               	skipz
   583  075A  2F7C               	goto	l576
   584                           
   585                           ;lcd.h: 45: {
   586                           ;lcd.h: 46: temp = 0x80 + b - 1;
   587  075B  0874               	movf	Lcd_Set_Cursor@b,w
   588  075C  3E7F               	addlw	127
   589  075D  00F5               	movwf	??_Lcd_Set_Cursor
   590  075E  0875               	movf	??_Lcd_Set_Cursor,w
   591  075F  00FA               	movwf	Lcd_Set_Cursor@temp
   592                           
   593                           ;lcd.h: 47: z = temp>>4;
   594  0760  087A               	movf	Lcd_Set_Cursor@temp,w
   595  0761  00F5               	movwf	??_Lcd_Set_Cursor
   596  0762  3004               	movlw	4
   597  0763                     u75:	
   598  0763  1003               	clrc
   599  0764  0CF5               	rrf	??_Lcd_Set_Cursor,f
   600  0765  3EFF               	addlw	-1
   601  0766  1D03               	skipz
   602  0767  2F63               	goto	u75
   603  0768  0875               	movf	??_Lcd_Set_Cursor,w
   604  0769  00F6               	movwf	??_Lcd_Set_Cursor+1
   605  076A  0876               	movf	??_Lcd_Set_Cursor+1,w
   606  076B  00F8               	movwf	Lcd_Set_Cursor@z
   607                           
   608                           ;lcd.h: 48: y = temp & 0x0F;
   609  076C  087A               	movf	Lcd_Set_Cursor@temp,w
   610  076D  390F               	andlw	15
   611  076E  00F5               	movwf	??_Lcd_Set_Cursor
   612  076F  0875               	movf	??_Lcd_Set_Cursor,w
   613  0770  00F9               	movwf	Lcd_Set_Cursor@y
   614                           
   615                           ;lcd.h: 49: Lcd_Cmd(z);
   616  0771  0878               	movf	Lcd_Set_Cursor@z,w
   617  0772  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   618                           
   619                           ;lcd.h: 50: Lcd_Cmd(y);
   620  0777  0879               	movf	Lcd_Set_Cursor@y,w
   621  0778  120A  118A  26C0   	fcall	_Lcd_Cmd
   622                           
   623                           ;lcd.h: 51: }
   624  077B  0008               	return
   625  077C                     l576:	
   626                           
   627                           ;lcd.h: 52: else if(a == 2)
   628  077C  0877               	movf	Lcd_Set_Cursor@a,w
   629  077D  3A02               	xorlw	2
   630  077E  1D03               	skipz
   631  077F  0008               	return
   632                           
   633                           ;lcd.h: 53: {
   634                           ;lcd.h: 54: temp = 0xC0 + b - 1;
   635  0780  0874               	movf	Lcd_Set_Cursor@b,w
   636  0781  3EBF               	addlw	191
   637  0782  00F5               	movwf	??_Lcd_Set_Cursor
   638  0783  0875               	movf	??_Lcd_Set_Cursor,w
   639  0784  00FA               	movwf	Lcd_Set_Cursor@temp
   640                           
   641                           ;lcd.h: 55: z = temp>>4;
   642  0785  087A               	movf	Lcd_Set_Cursor@temp,w
   643  0786  00F5               	movwf	??_Lcd_Set_Cursor
   644  0787  3004               	movlw	4
   645  0788                     u95:	
   646  0788  1003               	clrc
   647  0789  0CF5               	rrf	??_Lcd_Set_Cursor,f
   648  078A  3EFF               	addlw	-1
   649  078B  1D03               	skipz
   650  078C  2F88               	goto	u95
   651  078D  0875               	movf	??_Lcd_Set_Cursor,w
   652  078E  00F6               	movwf	??_Lcd_Set_Cursor+1
   653  078F  0876               	movf	??_Lcd_Set_Cursor+1,w
   654  0790  00F8               	movwf	Lcd_Set_Cursor@z
   655                           
   656                           ;lcd.h: 56: y = temp & 0x0F;
   657  0791  087A               	movf	Lcd_Set_Cursor@temp,w
   658  0792  390F               	andlw	15
   659  0793  00F5               	movwf	??_Lcd_Set_Cursor
   660  0794  0875               	movf	??_Lcd_Set_Cursor,w
   661  0795  00F9               	movwf	Lcd_Set_Cursor@y
   662                           
   663                           ;lcd.h: 57: Lcd_Cmd(z);
   664  0796  0878               	movf	Lcd_Set_Cursor@z,w
   665  0797  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   666                           
   667                           ;lcd.h: 58: Lcd_Cmd(y);
   668  079C  0879               	movf	Lcd_Set_Cursor@y,w
   669  079D  120A  118A  26C0   	fcall	_Lcd_Cmd
   670  07A0  0008               	return
   671  07A1                     __end_of_Lcd_Set_Cursor:	
   672                           
   673                           	psect	text4
   674  07A1                     __ptext4:	
   675 ;; *************** function _Lcd_Init *****************
   676 ;; Defined at:
   677 ;;		line 62 in file "lcd.h"
   678 ;; Parameters:    Size  Location     Type
   679 ;;		None
   680 ;; Auto vars:     Size  Location     Type
   681 ;;		None
   682 ;; Return value:  Size  Location     Type
   683 ;;		None               void
   684 ;; Registers used:
   685 ;;		wreg, status,2, status,0, pclath, cstack
   686 ;; Tracked objects:
   687 ;;		On entry : 0/0
   688 ;;		On exit  : 0/0
   689 ;;		Unchanged: 0/0
   690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   691 ;;      Params:         0       0       0       0       0
   692 ;;      Locals:         0       0       0       0       0
   693 ;;      Temps:          2       0       0       0       0
   694 ;;      Totals:         2       0       0       0       0
   695 ;;Total ram usage:        2 bytes
   696 ;; Hardware stack levels used:    1
   697 ;; Hardware stack levels required when called:    2
   698 ;; This function calls:
   699 ;;		_Lcd_Cmd
   700 ;;		_Lcd_Port
   701 ;; This function is called by:
   702 ;;		_main
   703 ;; This function uses a non-reentrant model
   704 ;;
   705                           
   706                           
   707                           ;psect for function _Lcd_Init
   708  07A1                     _Lcd_Init:	
   709                           
   710                           ;lcd.h: 64: Lcd_Port(0x00);
   711                           
   712                           ;incstack = 0
   713                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   714  07A1  3000               	movlw	0
   715  07A2  120A  118A  26A6  120A  118A  	fcall	_Lcd_Port
   716                           
   717                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
   718  07A7  3034               	movlw	52
   719  07A8  00F5               	movwf	??_Lcd_Init+1
   720  07A9  30F1               	movlw	241
   721  07AA  00F4               	movwf	??_Lcd_Init
   722  07AB                     u137:	
   723  07AB  0BF4               	decfsz	??_Lcd_Init,f
   724  07AC  2FAB               	goto	u137
   725  07AD  0BF5               	decfsz	??_Lcd_Init+1,f
   726  07AE  2FAB               	goto	u137
   727  07AF  2FB0               	nop2
   728                           
   729                           ;lcd.h: 66: Lcd_Cmd(0x03);
   730  07B0  3003               	movlw	3
   731  07B1  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   732                           
   733                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
   734  07B6  300D               	movlw	13
   735  07B7  00F5               	movwf	??_Lcd_Init+1
   736  07B8  30FB               	movlw	251
   737  07B9  00F4               	movwf	??_Lcd_Init
   738  07BA                     u147:	
   739  07BA  0BF4               	decfsz	??_Lcd_Init,f
   740  07BB  2FBA               	goto	u147
   741  07BC  0BF5               	decfsz	??_Lcd_Init+1,f
   742  07BD  2FBA               	goto	u147
   743  07BE  2FBF               	nop2
   744                           
   745                           ;lcd.h: 68: Lcd_Cmd(0x03);
   746  07BF  3003               	movlw	3
   747  07C0  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   748                           
   749                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
   750  07C5  301D               	movlw	29
   751  07C6  00F5               	movwf	??_Lcd_Init+1
   752  07C7  3091               	movlw	145
   753  07C8  00F4               	movwf	??_Lcd_Init
   754  07C9                     u157:	
   755  07C9  0BF4               	decfsz	??_Lcd_Init,f
   756  07CA  2FC9               	goto	u157
   757  07CB  0BF5               	decfsz	??_Lcd_Init+1,f
   758  07CC  2FC9               	goto	u157
   759                           
   760                           ;lcd.h: 70: Lcd_Cmd(0x03);
   761  07CD  3003               	movlw	3
   762  07CE  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   763                           
   764                           ;lcd.h: 72: Lcd_Cmd(0x02);
   765  07D3  3002               	movlw	2
   766  07D4  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   767                           
   768                           ;lcd.h: 73: Lcd_Cmd(0x02);
   769  07D9  3002               	movlw	2
   770  07DA  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   771                           
   772                           ;lcd.h: 74: Lcd_Cmd(0x08);
   773  07DF  3008               	movlw	8
   774  07E0  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   775                           
   776                           ;lcd.h: 75: Lcd_Cmd(0x00);
   777  07E5  3000               	movlw	0
   778  07E6  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   779                           
   780                           ;lcd.h: 76: Lcd_Cmd(0x0C);
   781  07EB  300C               	movlw	12
   782  07EC  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   783                           
   784                           ;lcd.h: 77: Lcd_Cmd(0x00);
   785  07F1  3000               	movlw	0
   786  07F2  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   787                           
   788                           ;lcd.h: 78: Lcd_Cmd(0x06);
   789  07F7  3006               	movlw	6
   790  07F8  120A  118A  26C0   	fcall	_Lcd_Cmd
   791  07FB  0008               	return
   792  07FC                     __end_of_Lcd_Init:	
   793                           
   794                           	psect	text5
   795  069B                     __ptext5:	
   796 ;; *************** function _Lcd_Clear *****************
   797 ;; Defined at:
   798 ;;		line 35 in file "lcd.h"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  2   36[COMMON] int 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0, pclath, cstack
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   812 ;;      Params:         0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used:    1
   818 ;; Hardware stack levels required when called:    2
   819 ;; This function calls:
   820 ;;		_Lcd_Cmd
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           
   827                           ;psect for function _Lcd_Clear
   828  069B                     _Lcd_Clear:	
   829                           
   830                           ;lcd.h: 37: Lcd_Cmd(0);
   831                           
   832                           ;incstack = 0
   833                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
   834  069B  3000               	movlw	0
   835  069C  120A  118A  26C0  120A  118A  	fcall	_Lcd_Cmd
   836                           
   837                           ;lcd.h: 38: Lcd_Cmd(1);
   838  06A1  3001               	movlw	1
   839  06A2  120A  118A  26C0   	fcall	_Lcd_Cmd
   840  06A5  0008               	return
   841  06A6                     __end_of_Lcd_Clear:	
   842                           
   843                           	psect	text6
   844  06C0                     __ptext6:	
   845 ;; *************** function _Lcd_Cmd *****************
   846 ;; Defined at:
   847 ;;		line 26 in file "lcd.h"
   848 ;; Parameters:    Size  Location     Type
   849 ;;  a               1    wreg     unsigned char 
   850 ;; Auto vars:     Size  Location     Type
   851 ;;  a               1    3[COMMON] unsigned char 
   852 ;; Return value:  Size  Location     Type
   853 ;;		None               void
   854 ;; Registers used:
   855 ;;		wreg, status,2, status,0, pclath, cstack
   856 ;; Tracked objects:
   857 ;;		On entry : 0/0
   858 ;;		On exit  : 0/0
   859 ;;		Unchanged: 0/0
   860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   861 ;;      Params:         0       0       0       0       0
   862 ;;      Locals:         1       0       0       0       0
   863 ;;      Temps:          2       0       0       0       0
   864 ;;      Totals:         3       0       0       0       0
   865 ;;Total ram usage:        3 bytes
   866 ;; Hardware stack levels used:    1
   867 ;; Hardware stack levels required when called:    1
   868 ;; This function calls:
   869 ;;		_Lcd_Port
   870 ;; This function is called by:
   871 ;;		_Lcd_Clear
   872 ;;		_Lcd_Set_Cursor
   873 ;;		_Lcd_Init
   874 ;;		_Lcd_Shift_Right
   875 ;;		_Lcd_Shift_Left
   876 ;; This function uses a non-reentrant model
   877 ;;
   878                           
   879                           
   880                           ;psect for function _Lcd_Cmd
   881  06C0                     _Lcd_Cmd:	
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
   885                           ;Lcd_Cmd@a stored from wreg
   886  06C0  00F3               	movwf	Lcd_Cmd@a
   887                           
   888                           ;lcd.h: 28: RC3 = 0;
   889  06C1  1283               	bcf	3,5	;RP0=0, select bank0
   890  06C2  1303               	bcf	3,6	;RP1=0, select bank0
   891  06C3  1187               	bcf	7,3	;volatile
   892                           
   893                           ;lcd.h: 29: Lcd_Port(a);
   894  06C4  0873               	movf	Lcd_Cmd@a,w
   895  06C5  120A  118A  26A6  120A  118A  	fcall	_Lcd_Port
   896                           
   897                           ;lcd.h: 30: RC2 = 1;
   898  06CA  1283               	bcf	3,5	;RP0=0, select bank0
   899  06CB  1303               	bcf	3,6	;RP1=0, select bank0
   900  06CC  1507               	bsf	7,2	;volatile
   901                           
   902                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
   903  06CD  300B               	movlw	11
   904  06CE  00F2               	movwf	??_Lcd_Cmd+1
   905  06CF  3062               	movlw	98
   906  06D0  00F1               	movwf	??_Lcd_Cmd
   907  06D1                     u167:	
   908  06D1  0BF1               	decfsz	??_Lcd_Cmd,f
   909  06D2  2ED1               	goto	u167
   910  06D3  0BF2               	decfsz	??_Lcd_Cmd+1,f
   911  06D4  2ED1               	goto	u167
   912  06D5  0000               	nop
   913                           
   914                           ;lcd.h: 32: RC2 = 0;
   915  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   916  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   917  06D8  1107               	bcf	7,2	;volatile
   918  06D9  0008               	return
   919  06DA                     __end_of_Lcd_Cmd:	
   920                           
   921                           	psect	text7
   922  06A6                     __ptext7:	
   923 ;; *************** function _Lcd_Port *****************
   924 ;; Defined at:
   925 ;;		line 4 in file "lcd.h"
   926 ;; Parameters:    Size  Location     Type
   927 ;;  a               1    wreg     unsigned char 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  a               1    0[COMMON] unsigned char 
   930 ;; Return value:  Size  Location     Type
   931 ;;		None               void
   932 ;; Registers used:
   933 ;;		wreg
   934 ;; Tracked objects:
   935 ;;		On entry : 0/0
   936 ;;		On exit  : 0/0
   937 ;;		Unchanged: 0/0
   938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   939 ;;      Params:         0       0       0       0       0
   940 ;;      Locals:         1       0       0       0       0
   941 ;;      Temps:          0       0       0       0       0
   942 ;;      Totals:         1       0       0       0       0
   943 ;;Total ram usage:        1 bytes
   944 ;; Hardware stack levels used:    1
   945 ;; This function calls:
   946 ;;		Nothing
   947 ;; This function is called by:
   948 ;;		_Lcd_Cmd
   949 ;;		_Lcd_Init
   950 ;;		_Lcd_Write_Char
   951 ;; This function uses a non-reentrant model
   952 ;;
   953                           
   954                           
   955                           ;psect for function _Lcd_Port
   956  06A6                     _Lcd_Port:	
   957                           
   958                           ;incstack = 0
   959                           ; Regs used in _Lcd_Port: [wreg]
   960                           ;Lcd_Port@a stored from wreg
   961  06A6  00F0               	movwf	Lcd_Port@a
   962                           
   963                           ;lcd.h: 6: if(a & 1)
   964  06A7  1C70               	btfss	Lcd_Port@a,0
   965  06A8  2EAD               	goto	l23
   966                           
   967                           ;lcd.h: 7: RC1 = 1;
   968  06A9  1283               	bcf	3,5	;RP0=0, select bank0
   969  06AA  1303               	bcf	3,6	;RP1=0, select bank0
   970  06AB  1487               	bsf	7,1	;volatile
   971  06AC  2EB0               	goto	l24
   972  06AD                     l23:	
   973                           
   974                           ;lcd.h: 8: else
   975                           ;lcd.h: 9: RC1 = 0;
   976  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   977  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   978  06AF  1087               	bcf	7,1	;volatile
   979  06B0                     l24:	
   980                           
   981                           ;lcd.h: 11: if(a & 2)
   982  06B0  1CF0               	btfss	Lcd_Port@a,1
   983  06B1  2EB4               	goto	l25
   984                           
   985                           ;lcd.h: 12: RC0 = 1;
   986  06B2  1407               	bsf	7,0	;volatile
   987  06B3  2EB5               	goto	l26
   988  06B4                     l25:	
   989                           
   990                           ;lcd.h: 13: else
   991                           ;lcd.h: 14: RC0 = 0;
   992  06B4  1007               	bcf	7,0	;volatile
   993  06B5                     l26:	
   994                           
   995                           ;lcd.h: 16: if(a & 4)
   996  06B5  1D70               	btfss	Lcd_Port@a,2
   997  06B6  2EB9               	goto	l27
   998                           
   999                           ;lcd.h: 17: RA6 = 1;
  1000  06B7  1705               	bsf	5,6	;volatile
  1001  06B8  2EBA               	goto	l28
  1002  06B9                     l27:	
  1003                           
  1004                           ;lcd.h: 18: else
  1005                           ;lcd.h: 19: RA6 = 0;
  1006  06B9  1305               	bcf	5,6	;volatile
  1007  06BA                     l28:	
  1008                           
  1009                           ;lcd.h: 21: if(a & 8)
  1010  06BA  1DF0               	btfss	Lcd_Port@a,3
  1011  06BB  2EBE               	goto	l29
  1012                           
  1013                           ;lcd.h: 22: RA7 = 1;
  1014  06BC  1785               	bsf	5,7	;volatile
  1015  06BD  0008               	return
  1016  06BE                     l29:	
  1017                           
  1018                           ;lcd.h: 23: else
  1019                           ;lcd.h: 24: RA7 = 0;
  1020  06BE  1385               	bcf	5,7	;volatile
  1021  06BF  0008               	return
  1022  06C0                     __end_of_Lcd_Port:	
  1023  007E                     btemp	set	126	;btemp
  1024  007E                     wtemp	set	126
  1025  007E                     wtemp0	set	126
  1026  0080                     wtemp1	set	128
  1027  0082                     wtemp2	set	130
  1028  0084                     wtemp3	set	132
  1029  0086                     wtemp4	set	134
  1030  0088                     wtemp5	set	136
  1031  007F                     wtemp6	set	127
  1032  007E                     ttemp	set	126
  1033  007E                     ttemp0	set	126
  1034  0081                     ttemp1	set	129
  1035  0084                     ttemp2	set	132
  1036  0087                     ttemp3	set	135
  1037  007F                     ttemp4	set	127
  1038  007E                     ltemp	set	126
  1039  007E                     ltemp0	set	126
  1040  0082                     ltemp1	set	130
  1041  0086                     ltemp2	set	134
  1042  0080                     ltemp3	set	128


Data Sizes:
    Strings     15
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 15
		 -> STR_1(CODE[15]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4     712
                                             11 COMMON     1     1      0
                                              0 BANK0      4     0      4
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     204
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     120
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     298
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Feb 23 01:24:04 2015

                        pc 0002                __CFG_CP$OFF 0000                         l23 06AD  
                       l24 06B0                         l25 06B4                         l26 06B5  
                       l27 06B9                         l28 06BA                         l29 06BE  
                       l64 06FA                         u55 072E                         u75 0763  
                       u95 0788                         fsr 0004                        l602 06FE  
                      l576 077C                        _RC0 0038                        _RC1 0039  
                      _RC2 003A                        _RA6 002E                        _RC3 003B  
                      _RA7 002F                        u117 073E                        u127 074F  
                      u137 07AB                        u147 07BA                        u157 07C9  
                      u167 06D1               __CFG_CPD$OFF 0000                        fsr0 0004  
             __CFG_LVP$OFF 0000                       STR_1 0009               __CFG_WRT$OFF 0000  
        ?_Lcd_Write_String 0070                       _main 06DA                       btemp 007E  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0000  
                     ttemp 007E         ??_Lcd_Write_String 0075                       wtemp 007E  
            __CFG_IESO$OFF 0000            __end_of_Lcd_Cmd 06DA              __CFG_MCLRE$ON 0000  
                    ?_main 0020              __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004B  
                    _TRISA 0085                      _TRISC 0087             __CFG_FCMEN$OFF 0000  
                    pclath 000A                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
         __end_of_Lcd_Init 07FC           __end_of_Lcd_Port 06C0            __initialization 07FC  
             __end_of_main 06FB                     ??_main 007B         __size_of_Lcd_Clear 000B  
                   _OSCCON 008F                  ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039  
           __CFG_PWRTE$OFF 0000            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 06A6             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0756  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pmaintext 06DA  
__size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 07A1                 ??_Lcd_Init 0074  
               ??_Lcd_Port 0070                 __stringtab 0003             _Lcd_Write_Char 071D  
                  _Lcd_Cmd 06C0            ?_Lcd_Set_Cursor 0074                    __ptext1 06FB  
                  __ptext2 071D                    __ptext3 0756                    __ptext4 07A1  
                  __ptext5 069B                    __ptext6 06C0                    __ptext7 06A6  
   __end_of_Lcd_Write_Char 0756       end_of_initialization 07FC                  Lcd_Port@a 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0077          Lcd_Write_String@i 0075  
                _Lcd_Clear 069B           _Lcd_Write_String 06FB        start_initialization 07FC  
        __size_of_Lcd_Init 005B          __size_of_Lcd_Port 001A   __CFG_FOSC$INTRC_NOCLKOUT 0000  
               ?_Lcd_Clear 0070            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020        __end_of__stringdata 0018  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075                  __pstrings 0003  
                 Lcd_Cmd@a 0073                ??_Lcd_Clear 0074                __stringbase 0008  
              __stringdata 0009           ??_Lcd_Write_Char 0071                   _Lcd_Init 07A1  
                 _Lcd_Port 06A6   __end_of_Lcd_Write_String 071D           __size_of_Lcd_Cmd 001A  
       __end_of__stringtab 0009          __CFG_BOR4V$BOR40V 0000              __size_of_main 0021  
                 main@argc 0020                   main@argv 0022         Lcd_Write_Char@temp 0072  
                stringcode 0003         Lcd_Set_Cursor@temp 007A                   stringdir 0003  
                 stringtab 0003  
