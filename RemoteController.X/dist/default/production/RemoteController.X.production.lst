

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Mar 03 19:23:07 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F886
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	strings,global,class=STRING,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	dabs	1,0x7E,2
    18  0000                     	;# 
    19  0001                     	;# 
    20  0002                     	;# 
    21  0003                     	;# 
    22  0004                     	;# 
    23  0005                     	;# 
    24  0006                     	;# 
    25  0007                     	;# 
    26  0009                     	;# 
    27  000A                     	;# 
    28  000B                     	;# 
    29  000C                     	;# 
    30  000D                     	;# 
    31  000E                     	;# 
    32  000E                     	;# 
    33  000F                     	;# 
    34  0010                     	;# 
    35  0011                     	;# 
    36  0012                     	;# 
    37  0013                     	;# 
    38  0014                     	;# 
    39  0015                     	;# 
    40  0015                     	;# 
    41  0016                     	;# 
    42  0017                     	;# 
    43  0018                     	;# 
    44  0019                     	;# 
    45  001A                     	;# 
    46  001B                     	;# 
    47  001B                     	;# 
    48  001C                     	;# 
    49  001D                     	;# 
    50  001E                     	;# 
    51  001F                     	;# 
    52  0081                     	;# 
    53  0085                     	;# 
    54  0086                     	;# 
    55  0087                     	;# 
    56  0089                     	;# 
    57  008C                     	;# 
    58  008D                     	;# 
    59  008E                     	;# 
    60  008F                     	;# 
    61  0090                     	;# 
    62  0091                     	;# 
    63  0092                     	;# 
    64  0093                     	;# 
    65  0093                     	;# 
    66  0093                     	;# 
    67  0094                     	;# 
    68  0095                     	;# 
    69  0096                     	;# 
    70  0097                     	;# 
    71  0098                     	;# 
    72  0099                     	;# 
    73  009A                     	;# 
    74  009B                     	;# 
    75  009C                     	;# 
    76  009D                     	;# 
    77  009E                     	;# 
    78  009F                     	;# 
    79  0105                     	;# 
    80  0107                     	;# 
    81  0108                     	;# 
    82  0109                     	;# 
    83  010C                     	;# 
    84  010C                     	;# 
    85  010D                     	;# 
    86  010E                     	;# 
    87  010F                     	;# 
    88  0185                     	;# 
    89  0187                     	;# 
    90  0188                     	;# 
    91  0189                     	;# 
    92  018C                     	;# 
    93  018D                     	;# 
    94  002E                     _RA6	set	46
    95  002F                     _RA7	set	47
    96  0038                     _RC0	set	56
    97  0039                     _RC1	set	57
    98  003A                     _RC2	set	58
    99  003B                     _RC3	set	59
   100  008F                     _OSCCON	set	143
   101  0085                     _TRISA	set	133
   102  0087                     _TRISC	set	135
   103                           
   104                           	psect	strings
   105  0003                     __pstrings:	
   106  0003                     stringtab:	
   107  0003                     __stringtab:	
   108  0003                     stringcode:	
   109                           ;	String table - string pointers are 1 byte each
   110                           
   111  0003                     stringdir:	
   112  0003  3000               	movlw	high stringdir
   113  0004  008A               	movwf	10
   114  0005  0804               	movf	4,w
   115  0006  0A84               	incf	4,f
   116  0007  0782               	addwf	2,f
   117  0008                     __stringbase:	
   118  0008  3400               	retlw	0
   119  0009                     __end_of__stringtab:	
   120  0009                     __stringdata:	
   121  0009                     STR_1:	
   122  0009  3448               	retlw	72	;'H'
   123  000A  3465               	retlw	101	;'e'
   124  000B  346A               	retlw	106	;'j'
   125  000C  3420               	retlw	32	;' '
   126  000D  344D               	retlw	77	;'M'
   127  000E  3461               	retlw	97	;'a'
   128  000F  3464               	retlw	100	;'d'
   129  0010  3473               	retlw	115	;'s'
   130  0011  3400               	retlw	0
   131  0012                     STR_2:	
   132  0012  3448               	retlw	72	;'H'
   133  0013  3465               	retlw	101	;'e'
   134  0014  346A               	retlw	106	;'j'
   135  0015  3420               	retlw	32	;' '
   136  0016  344B               	retlw	75	;'K'
   137  0017  346F               	retlw	111	;'o'
   138  0018  3473               	retlw	115	;'s'
   139  0019  3474               	retlw	116	;'t'
   140  001A  3400               	retlw	0
   141  001B                     __end_of__stringdata:	
   142                           
   143                           ; #config settings
   144  0000                     
   145                           	psect	cinit
   146  07FC                     start_initialization:	
   147  07FC                     __initialization:	
   148  07FC                     end_of_initialization:	
   149                           ;End of C runtime variable initialization code
   150                           
   151  07FC                     __end_of__initialization:	
   152  07FC  0183               	clrf	3
   153  07FD  120A  118A  2F17   	ljmp	_main	;jump to C main() function
   154                           
   155                           	psect	cstackCOMMON
   156  0070                     __pcstackCOMMON:	
   157  0070                     ?_Lcd_Port:	
   158  0070                     ??_Lcd_Port:	
   159                           ; 0 bytes @ 0x0
   160                           
   161  0070                     ?_Lcd_Cmd:	
   162                           ; 0 bytes @ 0x0
   163                           
   164  0070                     ?_Lcd_Init:	
   165                           ; 0 bytes @ 0x0
   166                           
   167  0070                     ?_Lcd_Write_Char:	
   168                           ; 0 bytes @ 0x0
   169                           
   170  0070                     ?_Lcd_Write_String:	
   171                           ; 0 bytes @ 0x0
   172                           
   173  0070                     ?_Lcd_Shift_Right:	
   174                           ; 0 bytes @ 0x0
   175                           
   176  0070                     ?_Lcd_Clear:	
   177                           ; 0 bytes @ 0x0
   178                           
   179  0070                     Lcd_Port@a:	
   180                           ; 2 bytes @ 0x0
   181                           
   182                           
   183                           ; 1 bytes @ 0x0
   184  0070                     	ds	1
   185  0071                     ??_Lcd_Cmd:	
   186  0071                     ??_Lcd_Write_Char:	
   187                           ; 0 bytes @ 0x1
   188                           
   189                           
   190                           ; 0 bytes @ 0x1
   191  0071                     	ds	1
   192  0072                     Lcd_Write_Char@temp:	
   193                           
   194                           ; 1 bytes @ 0x2
   195  0072                     	ds	1
   196  0073                     Lcd_Cmd@a:	
   197  0073                     Lcd_Write_Char@y:	
   198                           ; 1 bytes @ 0x3
   199                           
   200                           
   201                           ; 1 bytes @ 0x3
   202  0073                     	ds	1
   203  0074                     ??_Lcd_Clear:	
   204  0074                     ?_Lcd_Set_Cursor:	
   205                           ; 0 bytes @ 0x4
   206                           
   207  0074                     ??_Lcd_Init:	
   208                           ; 0 bytes @ 0x4
   209                           
   210  0074                     ??_Lcd_Shift_Right:	
   211                           ; 0 bytes @ 0x4
   212                           
   213  0074                     Lcd_Set_Cursor@b:	
   214                           ; 0 bytes @ 0x4
   215                           
   216  0074                     Lcd_Write_Char@a:	
   217                           ; 1 bytes @ 0x4
   218                           
   219                           
   220                           ; 1 bytes @ 0x4
   221  0074                     	ds	1
   222  0075                     ??_Lcd_Set_Cursor:	
   223  0075                     ??_Lcd_Write_String:	
   224                           ; 0 bytes @ 0x5
   225                           
   226  0075                     Lcd_Write_String@i:	
   227                           ; 0 bytes @ 0x5
   228                           
   229                           
   230                           ; 2 bytes @ 0x5
   231  0075                     	ds	2
   232  0077                     Lcd_Set_Cursor@a:	
   233  0077                     Lcd_Write_String@a:	
   234                           ; 1 bytes @ 0x7
   235                           
   236                           
   237                           ; 1 bytes @ 0x7
   238  0077                     	ds	1
   239  0078                     Lcd_Set_Cursor@z:	
   240                           
   241                           ; 1 bytes @ 0x8
   242  0078                     	ds	1
   243  0079                     Lcd_Set_Cursor@y:	
   244                           
   245                           ; 1 bytes @ 0x9
   246  0079                     	ds	1
   247  007A                     Lcd_Set_Cursor@temp:	
   248                           
   249                           ; 1 bytes @ 0xA
   250  007A                     	ds	1
   251  007B                     ??_main:	
   252                           
   253                           ; 0 bytes @ 0xB
   254  007B                     	ds	3
   255                           
   256                           	psect	cstackBANK0
   257  0020                     __pcstackBANK0:	
   258  0020                     ?_main:	
   259  0020                     main@argc:	
   260                           ; 2 bytes @ 0x0
   261                           
   262                           
   263                           ; 2 bytes @ 0x0
   264  0020                     	ds	2
   265  0022                     main@argv:	
   266                           
   267                           ; 2 bytes @ 0x2
   268  0022                     	ds	2
   269                           
   270                           	psect	maintext
   271  0717                     __pmaintext:	
   272 ;;
   273 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   274 ;;
   275 ;; *************** function _main *****************
   276 ;; Defined at:
   277 ;;		line 52 in file "main.c"
   278 ;; Parameters:    Size  Location     Type
   279 ;;  argc            2    0[BANK0 ] int 
   280 ;;  argv            2    2[BANK0 ] PTR PTR unsigned char 
   281 ;; Auto vars:     Size  Location     Type
   282 ;;		None
   283 ;; Return value:  Size  Location     Type
   284 ;;                  2    0[BANK0 ] int 
   285 ;; Registers used:
   286 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   287 ;; Tracked objects:
   288 ;;		On entry : 17F/0
   289 ;;		On exit  : 0/0
   290 ;;		Unchanged: 0/0
   291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   292 ;;      Params:         0       4       0       0       0
   293 ;;      Locals:         0       0       0       0       0
   294 ;;      Temps:          3       0       0       0       0
   295 ;;      Totals:         3       4       0       0       0
   296 ;;Total ram usage:        7 bytes
   297 ;; Hardware stack levels required when called:    3
   298 ;; This function calls:
   299 ;;		_Lcd_Clear
   300 ;;		_Lcd_Init
   301 ;;		_Lcd_Set_Cursor
   302 ;;		_Lcd_Shift_Right
   303 ;;		_Lcd_Write_String
   304 ;; This function is called by:
   305 ;;		Startup code after reset
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           
   310                           ;psect for function _main
   311  0717                     _main:	
   312                           
   313                           ;main.c: 53: OSCCON = 0b01110111;
   314                           
   315                           ;incstack = 0
   316                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   317  0717  3077               	movlw	119
   318  0718  1683               	bsf	3,5	;RP0=1, select bank1
   319  0719  1303               	bcf	3,6	;RP1=0, select bank1
   320  071A  008F               	movwf	15	;volatile
   321                           
   322                           ;main.c: 54: TRISC = 0b00000000;
   323  071B  0187               	clrf	7	;volatile
   324                           
   325                           ;main.c: 55: TRISA = 0b00000000;
   326  071C  0185               	clrf	5	;volatile
   327                           
   328                           ;main.c: 57: Lcd_Init();
   329  071D  120A  118A  27A1  120A  118A  	fcall	_Lcd_Init
   330                           
   331                           ;main.c: 58: Lcd_Clear();
   332  0722  120A  118A  2672  120A  118A  	fcall	_Lcd_Clear
   333                           
   334                           ;main.c: 59: Lcd_Set_Cursor(1,1);
   335  0727  01F4               	clrf	Lcd_Set_Cursor@b
   336  0728  0AF4               	incf	Lcd_Set_Cursor@b,f
   337  0729  3001               	movlw	1
   338  072A  120A  118A  2756  120A  118A  	fcall	_Lcd_Set_Cursor
   339                           
   340                           ;main.c: 60: Lcd_Write_String("Hej Mads");
   341  072F  3001               	movlw	(STR_1-__stringbase)& (0+255)
   342  0730  120A  118A  26BC  120A  118A  	fcall	_Lcd_Write_String
   343                           
   344                           ;main.c: 61: Lcd_Set_Cursor(2,1);
   345  0735  01F4               	clrf	Lcd_Set_Cursor@b
   346  0736  0AF4               	incf	Lcd_Set_Cursor@b,f
   347  0737  3002               	movlw	2
   348  0738  120A  118A  2756  120A  118A  	fcall	_Lcd_Set_Cursor
   349                           
   350                           ;main.c: 62: Lcd_Write_String("Hej Kost");
   351  073D  300A               	movlw	(STR_2-__stringbase)& (0+255)
   352  073E  120A  118A  26BC  120A  118A  	fcall	_Lcd_Write_String
   353  0743                     l648:	
   354                           ;main.c: 64: while(1) {
   355                           
   356                           
   357                           ;main.c: 65: Lcd_Shift_Right();
   358  0743  120A  118A  267D  120A  118A  	fcall	_Lcd_Shift_Right
   359                           
   360                           ;main.c: 66: _delay((unsigned long)((500)*(8000000/4000.0)));
   361  0748  3006               	movlw	6
   362  0749  00FD               	movwf	??_main+2
   363  074A  3013               	movlw	19
   364  074B  00FC               	movwf	??_main+1
   365  074C  30B1               	movlw	177
   366  074D  00FB               	movwf	??_main
   367  074E                     u117:	
   368  074E  0BFB               	decfsz	??_main,f
   369  074F  2F4E               	goto	u117
   370  0750  0BFC               	decfsz	??_main+1,f
   371  0751  2F4E               	goto	u117
   372  0752  0BFD               	decfsz	??_main+2,f
   373  0753  2F4E               	goto	u117
   374  0754  2F55               	nop2
   375  0755  2F43               	goto	l648
   376  0756                     __end_of_main:	
   377                           ;main.c: 67: }
   378                           ;main.c: 68: return (0);
   379                           ;	Return value of _main is never used
   380                           
   381                           
   382                           	psect	text1
   383  06BC                     __ptext1:	
   384 ;; *************** function _Lcd_Write_String *****************
   385 ;; Defined at:
   386 ;;		line 97 in file "lcd.h"
   387 ;; Parameters:    Size  Location     Type
   388 ;;  a               1    wreg     PTR unsigned char 
   389 ;;		 -> STR_2(9), STR_1(9), 
   390 ;; Auto vars:     Size  Location     Type
   391 ;;  a               1    7[COMMON] PTR unsigned char 
   392 ;;		 -> STR_2(9), STR_1(9), 
   393 ;;  i               2    5[COMMON] int 
   394 ;; Return value:  Size  Location     Type
   395 ;;		None               void
   396 ;; Registers used:
   397 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   398 ;; Tracked objects:
   399 ;;		On entry : 0/0
   400 ;;		On exit  : 0/0
   401 ;;		Unchanged: 0/0
   402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   403 ;;      Params:         0       0       0       0       0
   404 ;;      Locals:         3       0       0       0       0
   405 ;;      Temps:          0       0       0       0       0
   406 ;;      Totals:         3       0       0       0       0
   407 ;;Total ram usage:        3 bytes
   408 ;; Hardware stack levels used:    1
   409 ;; Hardware stack levels required when called:    2
   410 ;; This function calls:
   411 ;;		_Lcd_Write_Char
   412 ;; This function is called by:
   413 ;;		_main
   414 ;; This function uses a non-reentrant model
   415 ;;
   416                           
   417                           
   418                           ;psect for function _Lcd_Write_String
   419  06BC                     _Lcd_Write_String:	
   420                           
   421                           ;incstack = 0
   422                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   423                           ;Lcd_Write_String@a stored from wreg
   424  06BC  00F7               	movwf	Lcd_Write_String@a
   425                           
   426                           ;lcd.h: 99: int i;
   427                           ;lcd.h: 100: for(i=0;a[i]!='\0';i++)
   428  06BD  01F5               	clrf	Lcd_Write_String@i
   429  06BE  01F6               	clrf	Lcd_Write_String@i+1
   430  06BF                     l602:	
   431  06BF  0875               	movf	Lcd_Write_String@i,w
   432  06C0  0777               	addwf	Lcd_Write_String@a,w
   433  06C1  0084               	movwf	4
   434  06C2  120A  118A  2003  120A  118A  	fcall	stringdir
   435  06C7  3800               	iorlw	0
   436  06C8  1903               	btfsc	3,2
   437  06C9  0008               	return
   438                           
   439                           ;lcd.h: 101: Lcd_Write_Char(a[i]);
   440  06CA  0875               	movf	Lcd_Write_String@i,w
   441  06CB  0777               	addwf	Lcd_Write_String@a,w
   442  06CC  0084               	movwf	4
   443  06CD  120A  118A  2003  120A  118A  	fcall	stringdir
   444  06D2  120A  118A  26DE  120A  118A  	fcall	_Lcd_Write_Char
   445  06D7  3001               	movlw	1
   446  06D8  07F5               	addwf	Lcd_Write_String@i,f
   447  06D9  1803               	skipnc
   448  06DA  0AF6               	incf	Lcd_Write_String@i+1,f
   449  06DB  3000               	movlw	0
   450  06DC  07F6               	addwf	Lcd_Write_String@i+1,f
   451  06DD  2EBF               	goto	l602
   452  06DE                     __end_of_Lcd_Write_String:	
   453                           
   454                           	psect	text2
   455  06DE                     __ptext2:	
   456 ;; *************** function _Lcd_Write_Char *****************
   457 ;; Defined at:
   458 ;;		line 81 in file "lcd.h"
   459 ;; Parameters:    Size  Location     Type
   460 ;;  a               1    wreg     unsigned char 
   461 ;; Auto vars:     Size  Location     Type
   462 ;;  a               1    4[COMMON] unsigned char 
   463 ;;  y               1    3[COMMON] unsigned char 
   464 ;;  temp            1    2[COMMON] unsigned char 
   465 ;; Return value:  Size  Location     Type
   466 ;;		None               void
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0, pclath, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : 0/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   474 ;;      Params:         0       0       0       0       0
   475 ;;      Locals:         3       0       0       0       0
   476 ;;      Temps:          1       0       0       0       0
   477 ;;      Totals:         4       0       0       0       0
   478 ;;Total ram usage:        4 bytes
   479 ;; Hardware stack levels used:    1
   480 ;; Hardware stack levels required when called:    1
   481 ;; This function calls:
   482 ;;		_Lcd_Port
   483 ;; This function is called by:
   484 ;;		_Lcd_Write_String
   485 ;; This function uses a non-reentrant model
   486 ;;
   487                           
   488                           
   489                           ;psect for function _Lcd_Write_Char
   490  06DE                     _Lcd_Write_Char:	
   491                           
   492                           ;incstack = 0
   493                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   494                           ;Lcd_Write_Char@a stored from wreg
   495  06DE  00F4               	movwf	Lcd_Write_Char@a
   496                           
   497                           ;lcd.h: 83: char temp,y;
   498                           ;lcd.h: 84: temp = a&0x0F;
   499  06DF  0874               	movf	Lcd_Write_Char@a,w
   500  06E0  390F               	andlw	15
   501  06E1  00F1               	movwf	??_Lcd_Write_Char
   502  06E2  0871               	movf	??_Lcd_Write_Char,w
   503  06E3  00F2               	movwf	Lcd_Write_Char@temp
   504                           
   505                           ;lcd.h: 85: y = a&0xF0;
   506  06E4  0874               	movf	Lcd_Write_Char@a,w
   507  06E5  39F0               	andlw	240
   508  06E6  00F1               	movwf	??_Lcd_Write_Char
   509  06E7  0871               	movf	??_Lcd_Write_Char,w
   510  06E8  00F3               	movwf	Lcd_Write_Char@y
   511                           
   512                           ;lcd.h: 86: RC3 = 1;
   513  06E9  1283               	bcf	3,5	;RP0=0, select bank0
   514  06EA  1303               	bcf	3,6	;RP1=0, select bank0
   515  06EB  1587               	bsf	7,3	;volatile
   516                           
   517                           ;lcd.h: 87: Lcd_Port(y>>4);
   518  06EC  0873               	movf	Lcd_Write_Char@y,w
   519  06ED  00F1               	movwf	??_Lcd_Write_Char
   520  06EE  3004               	movlw	4
   521  06EF                     u55:	
   522  06EF  1003               	clrc
   523  06F0  0CF1               	rrf	??_Lcd_Write_Char,f
   524  06F1  3EFF               	addlw	-1
   525  06F2  1D03               	skipz
   526  06F3  2EEF               	goto	u55
   527  06F4  0871               	movf	??_Lcd_Write_Char,w
   528  06F5  120A  118A  2688  120A  118A  	fcall	_Lcd_Port
   529                           
   530                           ;lcd.h: 88: RC2 = 1;
   531  06FA  1283               	bcf	3,5	;RP0=0, select bank0
   532  06FB  1303               	bcf	3,6	;RP1=0, select bank0
   533  06FC  1507               	bsf	7,2	;volatile
   534                           
   535                           ;lcd.h: 89: _delay((unsigned long)((40)*(8000000/4000000.0)));
   536  06FD  301A               	movlw	26
   537  06FE  00F1               	movwf	??_Lcd_Write_Char
   538  06FF                     u127:	
   539  06FF  0BF1               	decfsz	??_Lcd_Write_Char,f
   540  0700  2EFF               	goto	u127
   541  0701  0000               	nop
   542                           
   543                           ;lcd.h: 90: RC2 = 0;
   544  0702  1283               	bcf	3,5	;RP0=0, select bank0
   545  0703  1303               	bcf	3,6	;RP1=0, select bank0
   546  0704  1107               	bcf	7,2	;volatile
   547                           
   548                           ;lcd.h: 91: Lcd_Port(temp);
   549  0705  0872               	movf	Lcd_Write_Char@temp,w
   550  0706  120A  118A  2688  120A  118A  	fcall	_Lcd_Port
   551                           
   552                           ;lcd.h: 92: RC2 = 1;
   553  070B  1283               	bcf	3,5	;RP0=0, select bank0
   554  070C  1303               	bcf	3,6	;RP1=0, select bank0
   555  070D  1507               	bsf	7,2	;volatile
   556                           
   557                           ;lcd.h: 93: _delay((unsigned long)((40)*(8000000/4000000.0)));
   558  070E  301A               	movlw	26
   559  070F  00F1               	movwf	??_Lcd_Write_Char
   560  0710                     u137:	
   561  0710  0BF1               	decfsz	??_Lcd_Write_Char,f
   562  0711  2F10               	goto	u137
   563  0712  0000               	nop
   564                           
   565                           ;lcd.h: 94: RC2 = 0;
   566  0713  1283               	bcf	3,5	;RP0=0, select bank0
   567  0714  1303               	bcf	3,6	;RP1=0, select bank0
   568  0715  1107               	bcf	7,2	;volatile
   569  0716  0008               	return
   570  0717                     __end_of_Lcd_Write_Char:	
   571                           
   572                           	psect	text3
   573  067D                     __ptext3:	
   574 ;; *************** function _Lcd_Shift_Right *****************
   575 ;; Defined at:
   576 ;;		line 104 in file "lcd.h"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;		None               void
   583 ;; Registers used:
   584 ;;		wreg, status,2, status,0, pclath, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 0/0
   587 ;;		On exit  : 0/0
   588 ;;		Unchanged: 0/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels used:    1
   596 ;; Hardware stack levels required when called:    2
   597 ;; This function calls:
   598 ;;		_Lcd_Cmd
   599 ;; This function is called by:
   600 ;;		_main
   601 ;; This function uses a non-reentrant model
   602 ;;
   603                           
   604                           
   605                           ;psect for function _Lcd_Shift_Right
   606  067D                     _Lcd_Shift_Right:	
   607                           
   608                           ;lcd.h: 106: Lcd_Cmd(0x01);
   609                           
   610                           ;incstack = 0
   611                           ; Regs used in _Lcd_Shift_Right: [wreg+status,2+status,0+pclath+cstack]
   612  067D  3001               	movlw	1
   613  067E  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   614                           
   615                           ;lcd.h: 107: Lcd_Cmd(0x0C);
   616  0683  300C               	movlw	12
   617  0684  120A  118A  26A2   	fcall	_Lcd_Cmd
   618  0687  0008               	return
   619  0688                     __end_of_Lcd_Shift_Right:	
   620                           
   621                           	psect	text4
   622  0756                     __ptext4:	
   623 ;; *************** function _Lcd_Set_Cursor *****************
   624 ;; Defined at:
   625 ;;		line 41 in file "lcd.h"
   626 ;; Parameters:    Size  Location     Type
   627 ;;  a               1    wreg     unsigned char 
   628 ;;  b               1    4[COMMON] unsigned char 
   629 ;; Auto vars:     Size  Location     Type
   630 ;;  a               1    7[COMMON] unsigned char 
   631 ;;  temp            1   10[COMMON] unsigned char 
   632 ;;  y               1    9[COMMON] unsigned char 
   633 ;;  z               1    8[COMMON] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;		None               void
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, pclath, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   643 ;;      Params:         1       0       0       0       0
   644 ;;      Locals:         4       0       0       0       0
   645 ;;      Temps:          2       0       0       0       0
   646 ;;      Totals:         7       0       0       0       0
   647 ;;Total ram usage:        7 bytes
   648 ;; Hardware stack levels used:    1
   649 ;; Hardware stack levels required when called:    2
   650 ;; This function calls:
   651 ;;		_Lcd_Cmd
   652 ;; This function is called by:
   653 ;;		_main
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           
   658                           ;psect for function _Lcd_Set_Cursor
   659  0756                     _Lcd_Set_Cursor:	
   660                           
   661                           ;incstack = 0
   662                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
   663                           ;Lcd_Set_Cursor@a stored from wreg
   664  0756  00F7               	movwf	Lcd_Set_Cursor@a
   665                           
   666                           ;lcd.h: 43: char temp,z,y;
   667                           ;lcd.h: 44: if(a == 1)
   668  0757  0877               	movf	Lcd_Set_Cursor@a,w
   669  0758  3A01               	xorlw	1
   670  0759  1D03               	skipz
   671  075A  2F7C               	goto	l576
   672                           
   673                           ;lcd.h: 45: {
   674                           ;lcd.h: 46: temp = 0x80 + b - 1;
   675  075B  0874               	movf	Lcd_Set_Cursor@b,w
   676  075C  3E7F               	addlw	127
   677  075D  00F5               	movwf	??_Lcd_Set_Cursor
   678  075E  0875               	movf	??_Lcd_Set_Cursor,w
   679  075F  00FA               	movwf	Lcd_Set_Cursor@temp
   680                           
   681                           ;lcd.h: 47: z = temp>>4;
   682  0760  087A               	movf	Lcd_Set_Cursor@temp,w
   683  0761  00F5               	movwf	??_Lcd_Set_Cursor
   684  0762  3004               	movlw	4
   685  0763                     u75:	
   686  0763  1003               	clrc
   687  0764  0CF5               	rrf	??_Lcd_Set_Cursor,f
   688  0765  3EFF               	addlw	-1
   689  0766  1D03               	skipz
   690  0767  2F63               	goto	u75
   691  0768  0875               	movf	??_Lcd_Set_Cursor,w
   692  0769  00F6               	movwf	??_Lcd_Set_Cursor+1
   693  076A  0876               	movf	??_Lcd_Set_Cursor+1,w
   694  076B  00F8               	movwf	Lcd_Set_Cursor@z
   695                           
   696                           ;lcd.h: 48: y = temp & 0x0F;
   697  076C  087A               	movf	Lcd_Set_Cursor@temp,w
   698  076D  390F               	andlw	15
   699  076E  00F5               	movwf	??_Lcd_Set_Cursor
   700  076F  0875               	movf	??_Lcd_Set_Cursor,w
   701  0770  00F9               	movwf	Lcd_Set_Cursor@y
   702                           
   703                           ;lcd.h: 49: Lcd_Cmd(z);
   704  0771  0878               	movf	Lcd_Set_Cursor@z,w
   705  0772  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   706                           
   707                           ;lcd.h: 50: Lcd_Cmd(y);
   708  0777  0879               	movf	Lcd_Set_Cursor@y,w
   709  0778  120A  118A  26A2   	fcall	_Lcd_Cmd
   710                           
   711                           ;lcd.h: 51: }
   712  077B  0008               	return
   713  077C                     l576:	
   714                           
   715                           ;lcd.h: 52: else if(a == 2)
   716  077C  0877               	movf	Lcd_Set_Cursor@a,w
   717  077D  3A02               	xorlw	2
   718  077E  1D03               	skipz
   719  077F  0008               	return
   720                           
   721                           ;lcd.h: 53: {
   722                           ;lcd.h: 54: temp = 0xC0 + b - 1;
   723  0780  0874               	movf	Lcd_Set_Cursor@b,w
   724  0781  3EBF               	addlw	191
   725  0782  00F5               	movwf	??_Lcd_Set_Cursor
   726  0783  0875               	movf	??_Lcd_Set_Cursor,w
   727  0784  00FA               	movwf	Lcd_Set_Cursor@temp
   728                           
   729                           ;lcd.h: 55: z = temp>>4;
   730  0785  087A               	movf	Lcd_Set_Cursor@temp,w
   731  0786  00F5               	movwf	??_Lcd_Set_Cursor
   732  0787  3004               	movlw	4
   733  0788                     u95:	
   734  0788  1003               	clrc
   735  0789  0CF5               	rrf	??_Lcd_Set_Cursor,f
   736  078A  3EFF               	addlw	-1
   737  078B  1D03               	skipz
   738  078C  2F88               	goto	u95
   739  078D  0875               	movf	??_Lcd_Set_Cursor,w
   740  078E  00F6               	movwf	??_Lcd_Set_Cursor+1
   741  078F  0876               	movf	??_Lcd_Set_Cursor+1,w
   742  0790  00F8               	movwf	Lcd_Set_Cursor@z
   743                           
   744                           ;lcd.h: 56: y = temp & 0x0F;
   745  0791  087A               	movf	Lcd_Set_Cursor@temp,w
   746  0792  390F               	andlw	15
   747  0793  00F5               	movwf	??_Lcd_Set_Cursor
   748  0794  0875               	movf	??_Lcd_Set_Cursor,w
   749  0795  00F9               	movwf	Lcd_Set_Cursor@y
   750                           
   751                           ;lcd.h: 57: Lcd_Cmd(z);
   752  0796  0878               	movf	Lcd_Set_Cursor@z,w
   753  0797  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   754                           
   755                           ;lcd.h: 58: Lcd_Cmd(y);
   756  079C  0879               	movf	Lcd_Set_Cursor@y,w
   757  079D  120A  118A  26A2   	fcall	_Lcd_Cmd
   758  07A0  0008               	return
   759  07A1                     __end_of_Lcd_Set_Cursor:	
   760                           
   761                           	psect	text5
   762  07A1                     __ptext5:	
   763 ;; *************** function _Lcd_Init *****************
   764 ;; Defined at:
   765 ;;		line 62 in file "lcd.h"
   766 ;; Parameters:    Size  Location     Type
   767 ;;		None
   768 ;; Auto vars:     Size  Location     Type
   769 ;;		None
   770 ;; Return value:  Size  Location     Type
   771 ;;		None               void
   772 ;; Registers used:
   773 ;;		wreg, status,2, status,0, pclath, cstack
   774 ;; Tracked objects:
   775 ;;		On entry : 0/0
   776 ;;		On exit  : 0/0
   777 ;;		Unchanged: 0/0
   778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   779 ;;      Params:         0       0       0       0       0
   780 ;;      Locals:         0       0       0       0       0
   781 ;;      Temps:          2       0       0       0       0
   782 ;;      Totals:         2       0       0       0       0
   783 ;;Total ram usage:        2 bytes
   784 ;; Hardware stack levels used:    1
   785 ;; Hardware stack levels required when called:    2
   786 ;; This function calls:
   787 ;;		_Lcd_Cmd
   788 ;;		_Lcd_Port
   789 ;; This function is called by:
   790 ;;		_main
   791 ;; This function uses a non-reentrant model
   792 ;;
   793                           
   794                           
   795                           ;psect for function _Lcd_Init
   796  07A1                     _Lcd_Init:	
   797                           
   798                           ;lcd.h: 64: Lcd_Port(0x00);
   799                           
   800                           ;incstack = 0
   801                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
   802  07A1  3000               	movlw	0
   803  07A2  120A  118A  2688  120A  118A  	fcall	_Lcd_Port
   804                           
   805                           ;lcd.h: 65: _delay((unsigned long)((20)*(8000000/4000.0)));
   806  07A7  3034               	movlw	52
   807  07A8  00F5               	movwf	??_Lcd_Init+1
   808  07A9  30F1               	movlw	241
   809  07AA  00F4               	movwf	??_Lcd_Init
   810  07AB                     u147:	
   811  07AB  0BF4               	decfsz	??_Lcd_Init,f
   812  07AC  2FAB               	goto	u147
   813  07AD  0BF5               	decfsz	??_Lcd_Init+1,f
   814  07AE  2FAB               	goto	u147
   815  07AF  2FB0               	nop2
   816                           
   817                           ;lcd.h: 66: Lcd_Cmd(0x03);
   818  07B0  3003               	movlw	3
   819  07B1  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   820                           
   821                           ;lcd.h: 67: _delay((unsigned long)((5)*(8000000/4000.0)));
   822  07B6  300D               	movlw	13
   823  07B7  00F5               	movwf	??_Lcd_Init+1
   824  07B8  30FB               	movlw	251
   825  07B9  00F4               	movwf	??_Lcd_Init
   826  07BA                     u157:	
   827  07BA  0BF4               	decfsz	??_Lcd_Init,f
   828  07BB  2FBA               	goto	u157
   829  07BC  0BF5               	decfsz	??_Lcd_Init+1,f
   830  07BD  2FBA               	goto	u157
   831  07BE  2FBF               	nop2
   832                           
   833                           ;lcd.h: 68: Lcd_Cmd(0x03);
   834  07BF  3003               	movlw	3
   835  07C0  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   836                           
   837                           ;lcd.h: 69: _delay((unsigned long)((11)*(8000000/4000.0)));
   838  07C5  301D               	movlw	29
   839  07C6  00F5               	movwf	??_Lcd_Init+1
   840  07C7  3091               	movlw	145
   841  07C8  00F4               	movwf	??_Lcd_Init
   842  07C9                     u167:	
   843  07C9  0BF4               	decfsz	??_Lcd_Init,f
   844  07CA  2FC9               	goto	u167
   845  07CB  0BF5               	decfsz	??_Lcd_Init+1,f
   846  07CC  2FC9               	goto	u167
   847                           
   848                           ;lcd.h: 70: Lcd_Cmd(0x03);
   849  07CD  3003               	movlw	3
   850  07CE  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   851                           
   852                           ;lcd.h: 72: Lcd_Cmd(0x02);
   853  07D3  3002               	movlw	2
   854  07D4  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   855                           
   856                           ;lcd.h: 73: Lcd_Cmd(0x02);
   857  07D9  3002               	movlw	2
   858  07DA  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   859                           
   860                           ;lcd.h: 74: Lcd_Cmd(0x08);
   861  07DF  3008               	movlw	8
   862  07E0  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   863                           
   864                           ;lcd.h: 75: Lcd_Cmd(0x00);
   865  07E5  3000               	movlw	0
   866  07E6  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   867                           
   868                           ;lcd.h: 76: Lcd_Cmd(0x0C);
   869  07EB  300C               	movlw	12
   870  07EC  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   871                           
   872                           ;lcd.h: 77: Lcd_Cmd(0x00);
   873  07F1  3000               	movlw	0
   874  07F2  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   875                           
   876                           ;lcd.h: 78: Lcd_Cmd(0x06);
   877  07F7  3006               	movlw	6
   878  07F8  120A  118A  26A2   	fcall	_Lcd_Cmd
   879  07FB  0008               	return
   880  07FC                     __end_of_Lcd_Init:	
   881                           
   882                           	psect	text6
   883  0672                     __ptext6:	
   884 ;; *************** function _Lcd_Clear *****************
   885 ;; Defined at:
   886 ;;		line 35 in file "lcd.h"
   887 ;; Parameters:    Size  Location     Type
   888 ;;		None
   889 ;; Auto vars:     Size  Location     Type
   890 ;;		None
   891 ;; Return value:  Size  Location     Type
   892 ;;                  2   36[COMMON] int 
   893 ;; Registers used:
   894 ;;		wreg, status,2, status,0, pclath, cstack
   895 ;; Tracked objects:
   896 ;;		On entry : 0/0
   897 ;;		On exit  : 0/0
   898 ;;		Unchanged: 0/0
   899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   900 ;;      Params:         0       0       0       0       0
   901 ;;      Locals:         0       0       0       0       0
   902 ;;      Temps:          0       0       0       0       0
   903 ;;      Totals:         0       0       0       0       0
   904 ;;Total ram usage:        0 bytes
   905 ;; Hardware stack levels used:    1
   906 ;; Hardware stack levels required when called:    2
   907 ;; This function calls:
   908 ;;		_Lcd_Cmd
   909 ;; This function is called by:
   910 ;;		_main
   911 ;; This function uses a non-reentrant model
   912 ;;
   913                           
   914                           
   915                           ;psect for function _Lcd_Clear
   916  0672                     _Lcd_Clear:	
   917                           
   918                           ;lcd.h: 37: Lcd_Cmd(0);
   919                           
   920                           ;incstack = 0
   921                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
   922  0672  3000               	movlw	0
   923  0673  120A  118A  26A2  120A  118A  	fcall	_Lcd_Cmd
   924                           
   925                           ;lcd.h: 38: Lcd_Cmd(1);
   926  0678  3001               	movlw	1
   927  0679  120A  118A  26A2   	fcall	_Lcd_Cmd
   928  067C  0008               	return
   929  067D                     __end_of_Lcd_Clear:	
   930                           
   931                           	psect	text7
   932  06A2                     __ptext7:	
   933 ;; *************** function _Lcd_Cmd *****************
   934 ;; Defined at:
   935 ;;		line 26 in file "lcd.h"
   936 ;; Parameters:    Size  Location     Type
   937 ;;  a               1    wreg     unsigned char 
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  a               1    3[COMMON] unsigned char 
   940 ;; Return value:  Size  Location     Type
   941 ;;		None               void
   942 ;; Registers used:
   943 ;;		wreg, status,2, status,0, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   949 ;;      Params:         0       0       0       0       0
   950 ;;      Locals:         1       0       0       0       0
   951 ;;      Temps:          2       0       0       0       0
   952 ;;      Totals:         3       0       0       0       0
   953 ;;Total ram usage:        3 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    1
   956 ;; This function calls:
   957 ;;		_Lcd_Port
   958 ;; This function is called by:
   959 ;;		_Lcd_Clear
   960 ;;		_Lcd_Set_Cursor
   961 ;;		_Lcd_Init
   962 ;;		_Lcd_Shift_Right
   963 ;;		_Lcd_Shift_Left
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function _Lcd_Cmd
   969  06A2                     _Lcd_Cmd:	
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
   973                           ;Lcd_Cmd@a stored from wreg
   974  06A2  00F3               	movwf	Lcd_Cmd@a
   975                           
   976                           ;lcd.h: 28: RC3 = 0;
   977  06A3  1283               	bcf	3,5	;RP0=0, select bank0
   978  06A4  1303               	bcf	3,6	;RP1=0, select bank0
   979  06A5  1187               	bcf	7,3	;volatile
   980                           
   981                           ;lcd.h: 29: Lcd_Port(a);
   982  06A6  0873               	movf	Lcd_Cmd@a,w
   983  06A7  120A  118A  2688  120A  118A  	fcall	_Lcd_Port
   984                           
   985                           ;lcd.h: 30: RC2 = 1;
   986  06AC  1283               	bcf	3,5	;RP0=0, select bank0
   987  06AD  1303               	bcf	3,6	;RP1=0, select bank0
   988  06AE  1507               	bsf	7,2	;volatile
   989                           
   990                           ;lcd.h: 31: _delay((unsigned long)((4)*(8000000/4000.0)));
   991  06AF  300B               	movlw	11
   992  06B0  00F2               	movwf	??_Lcd_Cmd+1
   993  06B1  3062               	movlw	98
   994  06B2  00F1               	movwf	??_Lcd_Cmd
   995  06B3                     u177:	
   996  06B3  0BF1               	decfsz	??_Lcd_Cmd,f
   997  06B4  2EB3               	goto	u177
   998  06B5  0BF2               	decfsz	??_Lcd_Cmd+1,f
   999  06B6  2EB3               	goto	u177
  1000  06B7  0000               	nop
  1001                           
  1002                           ;lcd.h: 32: RC2 = 0;
  1003  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  1004  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  1005  06BA  1107               	bcf	7,2	;volatile
  1006  06BB  0008               	return
  1007  06BC                     __end_of_Lcd_Cmd:	
  1008                           
  1009                           	psect	text8
  1010  0688                     __ptext8:	
  1011 ;; *************** function _Lcd_Port *****************
  1012 ;; Defined at:
  1013 ;;		line 4 in file "lcd.h"
  1014 ;; Parameters:    Size  Location     Type
  1015 ;;  a               1    wreg     unsigned char 
  1016 ;; Auto vars:     Size  Location     Type
  1017 ;;  a               1    0[COMMON] unsigned char 
  1018 ;; Return value:  Size  Location     Type
  1019 ;;		None               void
  1020 ;; Registers used:
  1021 ;;		wreg
  1022 ;; Tracked objects:
  1023 ;;		On entry : 0/0
  1024 ;;		On exit  : 0/0
  1025 ;;		Unchanged: 0/0
  1026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1027 ;;      Params:         0       0       0       0       0
  1028 ;;      Locals:         1       0       0       0       0
  1029 ;;      Temps:          0       0       0       0       0
  1030 ;;      Totals:         1       0       0       0       0
  1031 ;;Total ram usage:        1 bytes
  1032 ;; Hardware stack levels used:    1
  1033 ;; This function calls:
  1034 ;;		Nothing
  1035 ;; This function is called by:
  1036 ;;		_Lcd_Cmd
  1037 ;;		_Lcd_Init
  1038 ;;		_Lcd_Write_Char
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           
  1043                           ;psect for function _Lcd_Port
  1044  0688                     _Lcd_Port:	
  1045                           
  1046                           ;incstack = 0
  1047                           ; Regs used in _Lcd_Port: [wreg]
  1048                           ;Lcd_Port@a stored from wreg
  1049  0688  00F0               	movwf	Lcd_Port@a
  1050                           
  1051                           ;lcd.h: 6: if(a & 1)
  1052  0689  1C70               	btfss	Lcd_Port@a,0
  1053  068A  2E8F               	goto	l23
  1054                           
  1055                           ;lcd.h: 7: RC1 = 1;
  1056  068B  1283               	bcf	3,5	;RP0=0, select bank0
  1057  068C  1303               	bcf	3,6	;RP1=0, select bank0
  1058  068D  1487               	bsf	7,1	;volatile
  1059  068E  2E92               	goto	l24
  1060  068F                     l23:	
  1061                           
  1062                           ;lcd.h: 8: else
  1063                           ;lcd.h: 9: RC1 = 0;
  1064  068F  1283               	bcf	3,5	;RP0=0, select bank0
  1065  0690  1303               	bcf	3,6	;RP1=0, select bank0
  1066  0691  1087               	bcf	7,1	;volatile
  1067  0692                     l24:	
  1068                           
  1069                           ;lcd.h: 11: if(a & 2)
  1070  0692  1CF0               	btfss	Lcd_Port@a,1
  1071  0693  2E96               	goto	l25
  1072                           
  1073                           ;lcd.h: 12: RC0 = 1;
  1074  0694  1407               	bsf	7,0	;volatile
  1075  0695  2E97               	goto	l26
  1076  0696                     l25:	
  1077                           
  1078                           ;lcd.h: 13: else
  1079                           ;lcd.h: 14: RC0 = 0;
  1080  0696  1007               	bcf	7,0	;volatile
  1081  0697                     l26:	
  1082                           
  1083                           ;lcd.h: 16: if(a & 4)
  1084  0697  1D70               	btfss	Lcd_Port@a,2
  1085  0698  2E9B               	goto	l27
  1086                           
  1087                           ;lcd.h: 17: RA6 = 1;
  1088  0699  1705               	bsf	5,6	;volatile
  1089  069A  2E9C               	goto	l28
  1090  069B                     l27:	
  1091                           
  1092                           ;lcd.h: 18: else
  1093                           ;lcd.h: 19: RA6 = 0;
  1094  069B  1305               	bcf	5,6	;volatile
  1095  069C                     l28:	
  1096                           
  1097                           ;lcd.h: 21: if(a & 8)
  1098  069C  1DF0               	btfss	Lcd_Port@a,3
  1099  069D  2EA0               	goto	l29
  1100                           
  1101                           ;lcd.h: 22: RA7 = 1;
  1102  069E  1785               	bsf	5,7	;volatile
  1103  069F  0008               	return
  1104  06A0                     l29:	
  1105                           
  1106                           ;lcd.h: 23: else
  1107                           ;lcd.h: 24: RA7 = 0;
  1108  06A0  1385               	bcf	5,7	;volatile
  1109  06A1  0008               	return
  1110  06A2                     __end_of_Lcd_Port:	
  1111  007E                     btemp	set	126	;btemp
  1112  007E                     wtemp	set	126
  1113  007E                     wtemp0	set	126
  1114  0080                     wtemp1	set	128
  1115  0082                     wtemp2	set	130
  1116  0084                     wtemp3	set	132
  1117  0086                     wtemp4	set	134
  1118  0088                     wtemp5	set	136
  1119  007F                     wtemp6	set	127
  1120  007E                     ttemp	set	126
  1121  007E                     ttemp0	set	126
  1122  0081                     ttemp1	set	129
  1123  0084                     ttemp2	set	132
  1124  0087                     ttemp3	set	135
  1125  007F                     ttemp4	set	127
  1126  007E                     ltemp	set	126
  1127  007E                     ltemp0	set	126
  1128  0082                     ltemp1	set	130
  1129  0086                     ltemp2	set	134
  1130  0080                     ltemp3	set	128


Data Sizes:
    Strings     18
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(1) Largest target is 9
		 -> STR_2(CODE[9]), STR_1(CODE[9]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Shift_Right->_Lcd_Cmd
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     3      4     854
                                             11 COMMON     3     3      0
                                              0 BANK0      4     0      4
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                    _Lcd_Shift_Right
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     3     3      0     228
                                              5 COMMON     3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     120
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Shift_Right                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1     341
                                              4 COMMON     7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     135
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      75
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Shift_Right
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Mar 03 19:23:07 2015

                        pc 0002                __CFG_CP$OFF 0000                         l23 068F  
                       l24 0692                         l25 0696                         l26 0697  
                       l27 069B                         l28 069C                         l29 06A0  
                       u55 06EF                         u75 0763                         u95 0788  
                       fsr 0004                        l602 06BF                        l576 077C  
                      l648 0743                        _RC0 0038                        _RC1 0039  
                      _RC2 003A                        _RA6 002E                        _RC3 003B  
                      _RA7 002F                        u117 074E                        u127 06FF  
                      u137 0710                        u147 07AB                        u157 07BA  
                      u167 07C9                        u177 06B3               __CFG_CPD$OFF 0000  
                      fsr0 0004               __CFG_LVP$OFF 0000                       STR_1 0009  
                     STR_2 0012               __CFG_WRT$OFF 0000          ?_Lcd_Write_String 0070  
                     _main 0717                       btemp 007E              __CFG_BOREN$ON 0000  
                     ltemp 007E                       start 0000                       ttemp 007E  
       ??_Lcd_Write_String 0075                       wtemp 007E              __CFG_IESO$OFF 0000  
          __end_of_Lcd_Cmd 06BC              __CFG_MCLRE$ON 0000                      ?_main 0020  
            __CFG_WDTE$OFF 0000    __size_of_Lcd_Set_Cursor 004B                      _TRISA 0085  
                    _TRISC 0087             __CFG_FCMEN$OFF 0000                      pclath 000A  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F           __end_of_Lcd_Init 07FC  
         __end_of_Lcd_Port 06A2            __initialization 07FC               __end_of_main 0756  
                   ??_main 007B         __size_of_Lcd_Clear 000B                     _OSCCON 008F  
                ??_Lcd_Cmd 0071    __size_of_Lcd_Write_Char 0039             __CFG_PWRTE$OFF 0000  
 __size_of_Lcd_Shift_Right 000B            Lcd_Set_Cursor@a 0077            Lcd_Set_Cursor@b 0074  
          Lcd_Set_Cursor@y 0079            Lcd_Set_Cursor@z 0078    __end_of__initialization 07FC  
        __end_of_Lcd_Clear 067D             __pcstackCOMMON 0070             _Lcd_Set_Cursor 0756  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                 __pmaintext 0717  
__size_of_Lcd_Write_String 0022     __end_of_Lcd_Set_Cursor 07A1          ??_Lcd_Shift_Right 0074  
               ??_Lcd_Init 0074                 ??_Lcd_Port 0070                 __stringtab 0003  
           _Lcd_Write_Char 06DE                    _Lcd_Cmd 06A2            ?_Lcd_Set_Cursor 0074  
                  __ptext1 06BC                    __ptext2 06DE                    __ptext3 067D  
                  __ptext4 0756                    __ptext5 07A1                    __ptext6 0672  
                  __ptext7 06A2                    __ptext8 0688     __end_of_Lcd_Write_Char 0717  
     end_of_initialization 07FC                  Lcd_Port@a 0070            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0077          Lcd_Write_String@i 0075                  _Lcd_Clear 0672  
         _Lcd_Write_String 06BC        start_initialization 07FC          __size_of_Lcd_Init 005B  
        __size_of_Lcd_Port 001A   __CFG_FOSC$INTRC_NOCLKOUT 0000                 ?_Lcd_Clear 0070  
          _Lcd_Shift_Right 067D            Lcd_Write_Char@a 0074            Lcd_Write_Char@y 0073  
                ___latbits 0002              __pcstackBANK0 0020        __end_of__stringdata 001B  
                 ?_Lcd_Cmd 0070           ??_Lcd_Set_Cursor 0075                  __pstrings 0003  
  __end_of_Lcd_Shift_Right 0688                   Lcd_Cmd@a 0073                ??_Lcd_Clear 0074  
              __stringbase 0008                __stringdata 0009           ??_Lcd_Write_Char 0071  
                 _Lcd_Init 07A1                   _Lcd_Port 0688   __end_of_Lcd_Write_String 06DE  
         __size_of_Lcd_Cmd 001A         __end_of__stringtab 0009          __CFG_BOR4V$BOR40V 0000  
            __size_of_main 003F           ?_Lcd_Shift_Right 0070                   main@argc 0020  
                 main@argv 0022         Lcd_Write_Char@temp 0072                  stringcode 0003  
       Lcd_Set_Cursor@temp 007A                   stringdir 0003                   stringtab 0003  
